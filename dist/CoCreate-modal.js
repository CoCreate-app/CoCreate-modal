(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["modal"] = factory();
	else
		root["CoCreate"] = root["CoCreate"] || {}, root["CoCreate"]["modal"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "../CoCreate-components/CoCreate-modal/src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../CoCreate-components/CoCreate-modal/src/container.js":
/*!**************************************************************!*\
  !*** ../CoCreate-components/CoCreate-modal/src/container.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _modal = _interopRequireDefault(__webpack_require__(/*! ./modal.js */ \"../CoCreate-components/CoCreate-modal/src/modal.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ModalContainer(el) {\n  this.modals = [];\n  this.el = el;\n  this.modalClass = this.el.getAttribute(\"data-modal-class\");\n  this.SELECT_ZINDEX = 10;\n  this.UNSELECT_ZINDEX = 2;\n  this.ghostEl = null;\n  this.width = 0;\n  this.height = 0;\n  this.selectedModal = null;\n\n  if (!this.modalClass) {\n    this.modalClass = \"modal\";\n  }\n\n  this._createGhost(this.el.getAttribute(\"data-ghost-class\"));\n\n  this._initModals();\n\n  this._initEvent();\n}\n\nModalContainer.prototype = {\n  _createGhost: function (ghostClass) {\n    var node = document.createElement(\"div\");\n\n    if (!ghostClass) {\n      ghostClass = \"modal-ghost\";\n    }\n\n    node.classList.add(ghostClass);\n    this.el.appendChild(node);\n    this.ghostEl = node;\n  },\n  _initModals: function () {\n    var el_children = document.querySelectorAll(\".\" + this.modalClass);\n\n    for (var i = 0; i < el_children.length; i++) {\n      this.modals.push(new _modal.default(el_children[i], {}, this.el));\n    }\n\n    if (!this.selectedModal) {\n      this._selectModal(this.modals[this.modals.length - 1]);\n    }\n  },\n  _initEvent: function () {\n    let _this = this;\n\n    this.el.addEventListener('mousemove', function (e) {\n      e.preventDefault();\n\n      if (_this.selectedModal) {\n        _this.selectedModal._onMove(e);\n      }\n    });\n    this.el.addEventListener('mouseup', function (e) {\n      if (_this.selectedModal) {\n        _this.selectedModal._onUp(e);\n      }\n\n      e.preventDefault();\n    }, true);\n    this.el.addEventListener('touchmove', function (e) {\n      // e.preventDefault();\n      if (_this.selectedModal) {\n        _this.selectedModal._onMove(e.touches[0]);\n      }\n    });\n    this.el.addEventListener('touchend', function (e) {\n      // e.preventDefault();\n      if (_this.selectedModal) {\n        _this.selectedModal._onUp(e.touches[0]);\n      }\n    });\n    this.el.addEventListener('cocreate-selectmodal', function (e) {\n      if (_this.selectedModal) {\n        _this._selectModal(e.detail.modal);\n      }\n    });\n    this.el.addEventListener('cocreate-modalghost', function (e) {\n      if (_this.selectedModal) {\n        _this._ghostProcess(e.detail);\n      }\n    });\n    this.el.addEventListener('cocreate-removemodal', function (e) {\n      if (_this.selectedModal) {\n        _this._removeModal(e.detail.modal);\n      }\n    });\n\n    this._initResizeEvent();\n  },\n  _initResizeEvent: function () {\n    var _this = this;\n\n    var bound = this.el.getBoundingClientRect();\n    this.width = bound.width;\n    this.height = bound.height;\n    let ro = new ResizeObserver((entries, observer) => {\n      let contentRect = entries[0].contentRect;\n\n      _this._resizeProcess(_this.width, _this.height, contentRect.width, contentRect.height);\n    });\n    ro.observe(this.el);\n  },\n\n  _resizeProcess(prevWidth, prevHeight, width, height) {\n    this.width = width;\n    this.height = height;\n\n    if (prevWidth == width && prevHeight == height) {\n      return;\n    }\n\n    let dx = width - prevWidth;\n    let dy = height - prevHeight;\n\n    for (var i = 0; i < this.modals.length; i++) {\n      this.modals[i].resize(dx, dy, width, height);\n    }\n  },\n\n  _createModal: function (attr) {\n    var node = document.createElement(\"div\");\n    node.classList.add(this.modalClass);\n    node.style.zIndex = this.SELECT_ZINDEX;\n    this.el.appendChild(node);\n    var modal = new _modal.default(node, attr, this.el);\n    this.modals.push(modal);\n\n    this._selectModal(node);\n  },\n  _releaseSelect: function () {\n    if (!this.selectedModal) {\n      return;\n    }\n\n    this.selectedModal.el.style.zIndex = this.UNSELECT_ZINDEX;\n    this.selectedModal.el.classList.remove(\"modal_selected\");\n    this.selectedModal = null;\n  },\n  _selectModal: function (el) {\n    let modal = this._findModalByElement(el);\n\n    if (modal == this.selectedModal) {\n      return;\n    }\n\n    this._releaseSelect();\n\n    this.selectedModal = modal;\n\n    if (this.selectedModal) {\n      this.selectedModal.el.style.zIndex = this.SELECT_ZINDEX;\n      this.selectedModal.el.classList.add('modal_selected');\n      this.ghostEl.style.width = 0;\n      this.ghostEl.style.height = 0;\n    }\n  },\n  _findModalByElement: function (el) {\n    if (el instanceof _modal.default) {\n      return el;\n    }\n\n    for (var i = 0; i < this.modals.length; i++) {\n      if (this.modals[i].el.isEqualNode(el)) {\n        return this.modals[i];\n      }\n    }\n\n    return null;\n  },\n  getModalById: function (id) {\n    for (var i = 0; i < this.modals.length; i++) {\n      if (this.modals[i].id == id) {\n        return this.modals[i];\n      }\n    }\n\n    return null;\n  },\n  _ghostProcess: function (info) {\n    this.ghostEl.style.left = info.x + 'px';\n    this.ghostEl.style.top = info.y + 'px';\n    this.ghostEl.style.width = info.w + 'px';\n    this.ghostEl.style.height = info.h + 'px';\n\n    if (info.type === \"show\") {\n      if (this.ghostEl.style.display === 'none') {\n        this.ghostEl.style.display = 'block';\n      }\n\n      this.ghostEl.style.opacity = 0.2;\n    } else {\n      this.ghostEl.style.opacity = 0;\n\n      if (this.ghostEl.style.display !== 'none') {\n        this.ghostEl.style.display = 'none';\n      }\n    }\n\n    return;\n  },\n  _removeModal: function (modal) {\n    for (var i = 0; i < this.modals.length; i++) {\n      if (this.modals[i] === modal) {\n        this.el.removeChild(modal.el);\n        this.modals.splice(i, 1);\n        break;\n      }\n    }\n\n    if (this.modals.length > 0) {\n      this._selectModal(this.modals[this.modals.length - 1]);\n    } else {\n      this.selectedModal = null;\n    }\n\n    this.el.style.pointerEvents = \"none\";\n  }\n};\nvar _default = ModalContainer;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-modal/src/container.js\n");

/***/ }),

/***/ "../CoCreate-components/CoCreate-modal/src/index.js":
/*!**********************************************************!*\
  !*** ../CoCreate-components/CoCreate-modal/src/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _container = _interopRequireDefault(__webpack_require__(/*! ./container.js */ \"../CoCreate-components/CoCreate-modal/src/container.js\"));\n\nvar _utils = __webpack_require__(/*! ./utils.js */ \"../CoCreate-components/CoCreate-modal/src/utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction CoCreateWindow(id) {\n  let container_id = id ? id : 'modal-viewport';\n  this.container = null;\n  this.id = container_id;\n  this.pageId = (0, _utils.generateUUID)(20);\n  this.isRoot = this._checkRoot();\n\n  if (!this.isRoot) {\n    this.parentId = _utils.ModalStorage.parentPageId;\n    this.pageId = _utils.ModalStorage.pageId;\n    this.rootId = _utils.ModalStorage.rootPageId;\n  } else {\n    _utils.ModalStorage.rootPageId = this.pageId;\n    this.rootId = this.pageId;\n    this.parentId = this.pageId;\n  }\n\n  this._createContainer();\n\n  this._initWndButtons();\n\n  this._initSocket(); //. set parent_id and page_id for test \n\n\n  var html = document.querySelector(\"html\");\n  html.setAttribute(\"test-parent_id\", this.parentId);\n  html.setAttribute(\"test-page_id\", this.pageId);\n}\n\nCoCreateWindow.prototype = {\n  _checkRoot: function () {\n    try {\n      return window.self === window.top;\n    } catch (e) {\n      return false;\n    }\n  },\n  _createContainer: function () {\n    if (this.container) return true;\n    var el = document.getElementById(this.id);\n\n    if (el) {\n      this.container = new _container.default(el);\n      return true;\n    } else {\n      return false;\n    }\n  },\n  _initWndButtons: function () {\n    var closeBtns = document.querySelectorAll('.btn-modal-close');\n    var minmaxBtn = document.querySelector('.btn-modal-maximize');\n    var parkBtn = document.querySelector('.btn-modal-minimize');\n\n    var _this = this;\n\n    if (closeBtns.length > 0) {\n      for (var i = 0; i < closeBtns.length; i++) {\n        var closeBtn = closeBtns[i];\n        closeBtn.addEventListener('click', function (e) {\n          e.preventDefault();\n\n          _this.sendWindowBtnEvent('close');\n        });\n      }\n    }\n\n    if (minmaxBtn) {\n      minmaxBtn.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        _this.sendWindowBtnEvent('maximize'); // let state = this.getAttribute('data-state');\n        // if (state == 'min') {\n        //   _this.sendWindowBtnEvent('minimize');\n        //   this.setAttribute('data-state', 'max');\n        // } else {\n        //   _this.sendWindowBtnEvent('maximize');\n        //   this.setAttribute('data-state', 'min');\n        // }\n\n      });\n    }\n\n    if (parkBtn) {\n      parkBtn.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        _this.sendWindowBtnEvent('park');\n      });\n    }\n  },\n  sendWindowBtnEvent: function (type) {\n    var json = {\n      \"apiKey\": config.apiKey,\n      \"securityKey\": config.securityKey,\n      \"organization_id\": config.organization_Id,\n      \"data\": {\n        \"parentId\": this.parentId,\n        \"pageId\": this.pageId,\n        \"type\": type,\n        \"author\": \"jin\"\n      }\n    };\n    CoCreate.socket.send('windowBtnEvent', json);\n  },\n  _initSocket: function () {\n    var _this = this;\n\n    CoCreate.socket.listen('openWindow', function (data) {\n      if (data.parentId == _this.pageId) {\n        _this.container._createModal(data);\n      } // if (data.parentId == _this.pageId) {\n      //   _this.container._createModal(data);\n      // }\n\n    }), CoCreate.socket.listen('windowBtnEvent', function (data) {\n      if (data.parentId == _this.pageId) {\n        var pageId = data.pageId;\n        var type = data.type;\n\n        var modal = _this.container.getModalById(pageId);\n\n        if (modal) {\n          switch (type) {\n            case 'close':\n              _this.container._removeModal(modal);\n\n              break;\n\n            case 'maximize':\n              // minimizeWindow(w);\n              modal._setMaximize();\n\n              break;\n\n            case 'park':\n              modal.togglePark();\n              break;\n\n            default:\n          }\n        }\n      }\n    });\n  },\n  open: function (aTag) {\n    this.openWindow(aTag);\n  },\n  openWindow: function (aTag) {\n    var attr = {\n      url: aTag.getAttribute('href'),\n      x: aTag.getAttribute('data-modal_x'),\n      y: aTag.getAttribute('data-modal_y'),\n      width: aTag.getAttribute('data-modal_width'),\n      height: aTag.getAttribute('data-modal_height'),\n      ajax: aTag.getAttribute('data-modal_ajax'),\n      color: aTag.getAttribute('data-modal_color'),\n      header: aTag.getAttribute('data-modal_header') ? aTag.getAttribute('data-modal_header') : \"true\",\n      attributes: CoCreate.utils.getAttributes(aTag)\n    };\n    var open_type = aTag.getAttribute('data-modal_open');\n    open_type = open_type ? open_type : 'root';\n    _utils.ModalStorage.rootPageId = this.rootId;\n    var open_id = open_type; // if (this.isRoot) {\n    //   ModalStorage.parentPageId = this.pageId;\n    // } else {\n\n    switch (open_type) {\n      case 'parent':\n        open_id = this.parentId;\n        break;\n\n      case 'page':\n        open_id = this.pageId;\n        break;\n\n      case 'root':\n        open_id = this.rootId;\n        break;\n\n      default:\n        open_id = open_type;\n        break;\n      // code\n    }\n\n    _utils.ModalStorage.parentPageId = open_id;\n    attr.parentId = open_id; // }\n\n    if (this.isRoot) {\n      if (this._createContainer()) {\n        this.container._createModal(attr);\n      }\n    } else {\n      // attr.parentId = this.parentId;\n      CoCreate.socket.send('openWindow', {\n        \"apiKey\": config.apiKey,\n        \"securityKey\": config.securityKey,\n        \"organization_id\": config.organization_Id,\n        data: attr\n      });\n    }\n  }\n};\nlet CoCreateModal = new CoCreateWindow();\nvar _default = CoCreateModal;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-modal/src/index.js\n");

/***/ }),

/***/ "../CoCreate-components/CoCreate-modal/src/modal.js":
/*!**********************************************************!*\
  !*** ../CoCreate-components/CoCreate-modal/src/modal.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _utils = __webpack_require__(/*! ./utils.js */ \"../CoCreate-components/CoCreate-modal/src/utils.js\");\n\nfunction Modal(el, options, container) {\n  if (!(el && el.nodeType && el.nodeType === 1)) {\n    return;\n  }\n  /** define constant **/\n\n\n  this.MARGIN = 5;\n  this.FULLSCREEN_MARGIN = -20;\n  this.NO_SNAP = -31;\n  this.SNAP_MARGIN = -10;\n  this.RIGHT_SCROL = 5; // \tif (window.mobilecheck()) {\n  // \t  this.MARGIN = 20;\n  // \t}\n\n  /** options **/\n\n  let defaults = {\n    minWidth: 60,\n    minHeight: 40\n  };\n  this.id = (0, _utils.generateUUID)(20);\n  this.el = el;\n  this.clicked = null;\n  this.redraw = false;\n  this.boundStatus = {};\n  /**\n   * x: mouse x in element\n   * y: mouse y in element\n   * cx: x in document\n   * cy: y in document\n   * */\n\n  this.point = {};\n  this.rect = {};\n  this.clickedInfo = null;\n  this.preSnapped = null;\n  this.prevRect = {};\n  this.isSnap = false;\n  this.isHeader = true;\n  this.dragArea = null;\n  this.headerArea = null;\n  this.width = 0;\n  this.height = 0;\n  this.isParked = false;\n  this.iframe = null;\n  this.container = container;\n  this.options = Object.assign(defaults, options);\n  this.el.setAttribute(\"id\", this.id);\n  window.localStorage.setItem('page_id', this.id);\n\n  this._init();\n\n  this._setModalSize();\n\n  this._initEvent();\n\n  this.__animate();\n}\n\nModal.prototype = {\n  constructor: Modal,\n  _init: function () {\n    var opt = this.options;\n    this.isAjax = opt.ajax ? opt.ajax : this.el.getAttribute(\"data-modal_ajax\");\n    var windowURL = opt.url ? opt.url : this.el.getAttribute(\"href\");\n    var width = opt.width ? opt.width : this.el.getAttribute(\"data-modal_width\");\n    var height = opt.height ? opt.height : this.el.getAttribute(\"data-modal_height\");\n    var color = opt.color ? opt.color : this.el.getAttribute(\"data-modal_color\");\n    var x = opt.x ? opt.x : this.el.getAttribute(\"data-modal_x\");\n    var y = opt.y ? opt.y : this.el.getAttribute(\"data-modal_y\");\n    var showHeader = opt.header ? opt.header : this.el.getAttribute(\"data-modal_header\");\n    var attributes = opt.attributes; //. set default\n    // this.el.style.width = \"300px\";\n    // this.el.style.height = \"100%\";\n    // this.el.style.left = 0;\n    // this.el.style.right = 0;\n    // this.el.style.borderColor = \"#888\";\n\n    if (width && width != \"\") {\n      this.el.style.width = width;\n    } else {\n      this.el.style.width = \"600px\";\n    }\n\n    if (height && height != \"\") {\n      this.el.style.height = height;\n    } else {\n      this.el.style.height = \"100%\";\n    }\n\n    if (this.el.parentElement.clientWidth < this.el.clientWidth) {\n      this.el.style.width = \"100%\";\n    }\n\n    if (this.el.parentElement.clientHeight < this.el.clientHeight) {\n      this.el.style.width = \"100%\";\n    }\n\n    if (x && x != \"\") {\n      this.el.style.left = x;\n    } else {\n      let hX = (this.el.parentElement.clientWidth - this.el.offsetWidth) / 2;\n      hX = hX > 0 ? hX : 0;\n      this.el.style.left = hX + \"px\";\n    }\n\n    if (y && y != \"\") {\n      this.el.style.top = y;\n    } else {\n      let hY = (this.el.parentElement.clientHeight - this.el.offsetHeight) / 2;\n      hY = hY > 0 ? hY : 0;\n      this.el.style.top = hY + \"px\";\n    }\n\n    if (color && color !== \"\") this.el.style.borderColor = color;\n\n    if (showHeader == \"true\") {\n      this.isHeader = true;\n\n      this._createTitle();\n    } else {\n      this.isHeader = false;\n\n      this._createDragArea();\n    }\n\n    this.el.innerHTML = this.el.innerHTML + `<div class=\"parked-closeBtn\"><i class=\"fas fa-times closeBtn\"></i></div>`;\n    let iframe = null;\n\n    if (windowURL && windowURL != \"\") {\n      iframe = this.__createContainer(this.headerArea);\n      iframe.src = windowURL;\n    } else if (attributes) {\n      iframe = this.__createContainer(this.headerArea, attributes['data-modal_iframe'] === \"false\" ? \"div\" : \"iframe\");\n\n      if (attributes['data-pass_to']) {\n        iframe.setAttribute('data-pass_id', attributes['data-pass_to']);\n        iframe.setAttribute('data-collection', \"\");\n        iframe.setAttribute('data-document_id', \"\");\n        iframe.setAttribute('data-request_id', (0, _utils.generateUUID)(20));\n      }\n\n      if (attributes['data-pass_name']) {\n        iframe.setAttribute('name', attributes['data-pass_name']);\n      }\n    } else {\n      return;\n    }\n\n    this.el.appendChild(iframe);\n    this.iframe = iframe;\n  },\n  __createContainer: function (isHeader, type) {\n    const tag = type || \"iframe\";\n    let container = document.createElement(tag);\n    container.style.width = \"100%\";\n    container.style.height = \"100%\";\n\n    if (isHeader) {\n      container.style.height = \"calc(100% - 45px)\";\n    }\n\n    if (type != \"iframe\") {\n      container.setAttribute('class', 'domEditor');\n    }\n\n    return container;\n  },\n  _initEvent: function () {\n    let self = this;\n\n    if (this.iframe) {\n      this.iframe.addEventListener('load', function () {\n        console.log(self.iframe.contentDocument);\n        const iframeContent = self.iframe.contentDocument;\n        const nav = iframeContent.querySelector('.nav');\n        iframeContent.addEventListener('click', function () {\n          var event = new CustomEvent(\"cocreate-selectmodal\", {\n            detail: {\n              modal: self\n            }\n          });\n          self.el.parentNode.dispatchEvent(event);\n        });\n      });\n    }\n\n    this.el.addEventListener(\"click\", function (e) {\n      var event = new CustomEvent(\"cocreate-selectmodal\", {\n        detail: {\n          modal: self\n        }\n      });\n      self.el.parentNode.dispatchEvent(event);\n    }, true);\n    this.el.addEventListener(\"dblclick\", function (e) {\n      if (self.isParked) {\n        self.isParked = false;\n        self.el.classList.remove(\"modal-parked\");\n      }\n    });\n    this.el.addEventListener('modal-resizing', function (e) {\n      console.log('resizing event trigger');\n    });\n    this.el.addEventListener('touchstart', function (e) {\n      self.changeRightDragEl(true);\n      var event = new CustomEvent(\"cocreate-selectmodal\", {\n        detail: {\n          modal: self\n        }\n      });\n      self.el.parentNode.dispatchEvent(event);\n\n      self._onDown(e.touches[0]);\n    });\n    this.el.addEventListener('mousemove', function (e) {\n      self.changeRightDragEl(false);\n    });\n    this.el.addEventListener('mousedown', function (e) {\n      var event = new CustomEvent(\"cocreate-selectmodal\", {\n        detail: {\n          modal: self\n        }\n      });\n      self.el.parentNode.dispatchEvent(event);\n\n      self._onDown(e);\n    });\n    this.el.addEventListener('mouseup', function (e) {// self.changeRightDragEl(true);\n    });\n\n    this._addButtonEvent();\n\n    this.el.addEventListener(\"modal-resizeend\", function (e) {\n      self._saveFetch(); // self.changeRightDragEl(true);\n\n    });\n    this.el.addEventListener(\"modal-moveend\", function (e) {\n      self._saveFetch(); // self.changeRightDragEl(true);\n\n    });\n  },\n  changeRightDragEl: function (isRevert = true) {\n    const right_el = this.el.querySelector('.modal-drag-area-right');\n    const size = isRevert ? \"0px\" : \"-10px\";\n\n    if (right_el) {\n      right_el.style.right = size;\n    }\n\n    this.RIGHT_SCROL = !isRevert ? 0 : 5;\n  },\n  _addButtonEvent: function () {\n    var self = this;\n\n    if (this.el.querySelector(\".modal-title-area .closeBtn\")) {\n      this.el.querySelector(\".modal-title-area .closeBtn\").addEventListener(\"click\", function (e) {\n        e.preventDefault();\n        self.el.parentNode.dispatchEvent(new CustomEvent(\"cocreate-removemodal\", {\n          detail: {\n            modal: self\n          }\n        }));\n      });\n    }\n\n    if (this.el.querySelector(\".parked-closeBtn .closeBtn\")) {\n      this.el.querySelector(\".parked-closeBtn .closeBtn\").addEventListener(\"click\", function (e) {\n        e.preventDefault();\n        self.el.parentNode.dispatchEvent(new CustomEvent(\"cocreate-removemodal\", {\n          detail: {\n            modal: self\n          }\n        }));\n      });\n    }\n\n    if (this.el.querySelector(\".modal-title-area .maximizeBtn\")) {\n      this.el.querySelector(\".modal-title-area .maximizeBtn\").addEventListener(\"click\", function (e) {\n        e.preventDefault();\n\n        self._setMaximize();\n      });\n    }\n\n    if (this.el.querySelector(\".modal-title-area .minimizeBtn\")) {\n      this.el.querySelector(\".modal-title-area .minimizeBtn\").addEventListener(\"click\", function (e) {\n        e.preventDefault();\n        self.togglePark();\n      });\n    } // if (this.el.querySelector(\".modal-title-area .parkBtn\")) {\n    //   this.el.querySelector(\".modal-title-area .parkBtn\").addEventListener(\"click\", function(e) {\n    //     self.togglePark()\n    //   })\n    // }\n\n  },\n  togglePark: function () {\n    if (this.isParked) {\n      this.isParked = false;\n      this.el.classList.remove(\"modal-parked\");\n    } else {\n      this.isParked = true;\n      this.el.classList.add(\"modal-parked\");\n    }\n  },\n  _setModalSize: function () {\n    let bound = this.el.getBoundingClientRect();\n    let parentBound = this.el.parentNode.getBoundingClientRect();\n    this.width = bound.width;\n    this.height = bound.height;\n    this.el.style.left = bound.left - parentBound.left;\n    this.el.style.top = bound.top - parentBound.top;\n  },\n  _saveFetch: function () {\n    if (this.el.classList.contains(\"domEditor\")) {\n      CoCreateHtmlTags.save(this.el);\n    }\n  },\n  _onMove: function (e) {\n    const data = this.__getBoundStatus(e);\n\n    this.redraw = true;\n  },\n  _onDown: function (e) {\n    //. set clicked\n    this.__getBoundStatus(e);\n\n    var isResizing = this.boundStatus.isRight || this.boundStatus.isLeft || this.boundStatus.isTop || this.boundStatus.isBottom;\n    this.clickedInfo = {\n      x: this.point.x,\n      y: this.point.y,\n      cx: this.point.cx,\n      cy: this.point.cy,\n      w: this.rect.width,\n      h: this.rect.height,\n      isResizing: isResizing,\n      isMoving: !isResizing && this._isMovable(),\n      boundStatus: this.boundStatus,\n      isChangeStart: true\n    };\n  },\n  _onUp: function (e) {\n    if (e) {\n      this.__getBoundStatus(e);\n    }\n\n    if (!this.clickedInfo) {\n      return;\n    }\n\n    if (this.clickedInfo.isMoving && !this.isParked) {\n      let p_w = this.el.parentNode.offsetWidth,\n          p_h = this.el.parentNode.offsetHeight;\n      let snap_info = null;\n\n      if (this.__between(this.rect.top, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this.__between(this.rect.left, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this.__between(p_w - this.rect.right, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this.__between(p_h - this.rect.bottom, this.NO_SNAP, this.FULLSCREEN_MARGIN)) {\n        snap_info = {\n          x: 0,\n          y: 0,\n          w: '100%',\n          h: '100%'\n        };\n      } else if (this.__between(this.rect.top, this.NO_SNAP, this.SNAP_MARGIN)) {\n        snap_info = {\n          x: 0,\n          y: 0,\n          w: '100%',\n          h: '50%'\n        };\n      } else if (this.__between(this.rect.left, this.NO_SNAP, this.SNAP_MARGIN)) {\n        snap_info = {\n          x: 0,\n          y: 0,\n          w: '50%',\n          h: '100%'\n        };\n      } else if (this.__between(p_w - this.rect.right, this.NO_SNAP, this.SNAP_MARGIN)) {\n        snap_info = {\n          x: '50%',\n          y: 0,\n          w: '50%',\n          h: '100%'\n        };\n      } else if (this.__between(p_h - this.rect.bottom, this.NO_SNAP, this.SNAP_MARGIN)) {\n        snap_info = {\n          x: 0,\n          y: '50%',\n          w: '100%',\n          h: '50%'\n        };\n      }\n\n      if (snap_info && !this.isSnap) {\n        this.__setBound(this.el, snap_info.x, snap_info.y, snap_info.w, snap_info.h);\n\n        this.preSnapped = {\n          x: this.rect.x,\n          y: this.rect.y,\n          width: this.rect.width,\n          height: this.rect.height\n        };\n        this.isSnap = true;\n      }\n\n      var ghost_info = {\n        x: this.rect.x,\n        y: this.rect.y,\n        w: this.rect.width,\n        h: this.rect.height\n      };\n      this.el.parentNode.dispatchEvent(new CustomEvent(\"cocreate-modalghost\", {\n        detail: ghost_info\n      }));\n    }\n\n    if (this.clickedInfo.isResizing) {\n      this.createModalEvent('modal-resizeend');\n\n      this._setModalSize();\n\n      this.isSnap = false;\n    } else if (this.clickedInfo.isMoving) {\n      this.createModalEvent('modal-moveend');\n    }\n\n    this.clickedInfo = null;\n  },\n  __setBound: function (el, x, y, w, h) {\n    var borderHeight = this.el.offsetHeight - this.el.clientHeight;\n    var borderWidth = this.el.offsetWidth - this.el.clientWidth;\n    el.style.left = x;\n    el.style.top = y; // el.style.width = \"calc( \" + w + \" - \" + borderWidth + \"px )\";\n    // el.style.height = \"calc( \"  + h + \" - \" + borderHeight + \"px )\";\n\n    el.style.width = w;\n    el.style.height = h;\n  },\n  __setRectInfo: function () {\n    let bound = this.el.getBoundingClientRect();\n    let parentRect = this.el.parentNode.getBoundingClientRect();\n    this.rect = {};\n    this.rect.x = bound.x - parentRect.x;\n    this.rect.y = bound.y - parentRect.y;\n    this.rect.width = bound.width;\n    this.rect.height = bound.height;\n    this.rect.top = bound.top - parentRect.top;\n    this.rect.bottom = bound.bottom - parentRect.top;\n    this.rect.left = bound.left - parentRect.left;\n    this.rect.right = bound.right - parentRect.left;\n  },\n  __getBoundStatus: function (e) {\n    let bound = this.el.getBoundingClientRect();\n    let parentRect = this.el.parentNode.getBoundingClientRect();\n    let x = e.clientX - bound.left; // - parentRect.left;\n\n    let y = e.clientY - bound.top; // - parentRect.top;\n\n    this.__setRectInfo();\n\n    this.point.x = x;\n    this.point.y = y;\n    this.point.cx = e.clientX - parentRect.left;\n    this.point.cy = e.clientY - parentRect.top;\n    this.boundStatus = {\n      isTop: y < this.MARGIN && y > -this.MARGIN,\n      isLeft: x < this.MARGIN && x > -this.MARGIN,\n      isRight: x >= bound.width - this.RIGHT_SCROL && x <= bound.width + this.MARGIN + (this.MARGIN - this.RIGHT_SCROL),\n      isBottom: y >= bound.height - this.MARGIN && y <= bound.height + this.MARGIN\n    };\n    return this.boundStatus;\n  },\n  __between: function (x, min, max) {\n    return x >= min && x <= max;\n  },\n  __animate: function () {\n    let self = this;\n    requestAnimationFrame(function () {\n      self.__animate();\n    });\n\n    if (!this.redraw) {\n      return;\n    }\n\n    this.redraw = false;\n    let c_info = this.clickedInfo;\n    var eventName = null;\n    /**\n     * Resize process\n     **/\n\n    if (c_info && c_info.isResizing && !this.isParked) {\n      if (c_info.boundStatus.isRight) this.el.style.width = Math.max(this.point.x, this.options.minWidth) + 'px';\n\n      if (c_info.boundStatus.isBottom) {\n        this.el.style.height = Math.max(this.point.y, this.options.minHeight) + 'px';\n      }\n\n      if (c_info.boundStatus.isLeft) {\n        var c_width = Math.max(c_info.cx - this.point.cx + c_info.w, this.options.minWidth);\n\n        if (c_width > this.options.minWidth) {\n          this.el.style.width = c_width + 'px';\n          this.el.style.left = this.point.cx + 'px';\n        }\n      }\n\n      if (c_info.boundStatus.isTop) {\n        var c_height = Math.max(c_info.cy - this.point.cy + c_info.h, this.options.minHeight);\n\n        if (c_height > this.options.minHeight) {\n          this.el.style.height = c_height + 'px';\n          this.el.style.top = this.point.cy + 'px';\n        }\n      }\n\n      eventName = \"modal-resizing\";\n\n      if (c_info.isChangeStart) {\n        this.clickedInfo.isChangeStart = false;\n        eventName = \"modal-resizestart\";\n      }\n\n      this.createModalEvent(eventName);\n      return;\n    }\n\n    if (c_info && c_info.isMoving) {\n      /** \n       * Ghost Process\n       **/\n      let p_w = this.el.parentNode.offsetWidth,\n          p_h = this.el.parentNode.offsetHeight;\n      let ghost_info = null;\n\n      if (this.__between(this.rect.top, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this.__between(this.rect.left, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this.__between(p_w - this.rect.right, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this.__between(p_h - this.rect.bottom, this.NO_SNAP, this.FULLSCREEN_MARGIN)) {\n        ghost_info = {\n          x: 0,\n          y: 0,\n          w: p_w,\n          h: p_h,\n          type: \"show\"\n        };\n      } else if (this.__between(this.rect.top, this.NO_SNAP, this.SNAP_MARGIN)) {\n        ghost_info = {\n          x: 0,\n          y: 0,\n          w: p_w,\n          h: p_h / 2,\n          type: \"show\"\n        };\n      } else if (this.__between(this.rect.left, this.NO_SNAP, this.SNAP_MARGIN)) {\n        ghost_info = {\n          x: 0,\n          y: 0,\n          w: p_w / 2,\n          h: p_h,\n          type: \"show\"\n        };\n      } else if (this.__between(p_w - this.rect.right, this.NO_SNAP, this.SNAP_MARGIN)) {\n        ghost_info = {\n          x: p_w / 2,\n          y: 0,\n          w: p_w / 2,\n          h: p_h,\n          type: \"show\"\n        };\n      } else if (this.__between(p_h - this.rect.bottom, this.NO_SNAP, this.SNAP_MARGIN)) {\n        ghost_info = {\n          x: 0,\n          y: p_h / 2,\n          w: p_w,\n          h: p_h / 2,\n          type: \"show\"\n        };\n      } else {\n        ghost_info = {\n          x: this.rect.left,\n          y: this.rect.top,\n          w: this.rect.width,\n          h: this.rect.height,\n          type: \"hide\"\n        };\n      }\n\n      if (ghost_info && !this.isParked && !this.isSnap) {\n        this.el.parentNode.dispatchEvent(new CustomEvent(\"cocreate-modalghost\", {\n          detail: ghost_info\n        }));\n      }\n\n      if (this.isSnap) {\n        // this.el.style.left = (this.point.cx - this.preSnapped.width / 2) + 'px';\n        // this.el.style.top = (this.point.cy - Math.min(c_info.y, this.preSnapped.height)) + 'px';\n        this.el.style.left = this.point.cx + 'px';\n        this.el.style.top = this.point.cy + 'px';\n        this.el.style.width = this.preSnapped.width + 'px';\n        this.el.style.height = this.preSnapped.height + 'px';\n        this.isSnap = false;\n      } else {\n        this.el.style.top = this.point.cy - c_info.y + 'px';\n        this.el.style.left = this.point.cx - c_info.x + 'px';\n      }\n\n      eventName = \"modal-moving\";\n\n      if (c_info.isChangeStart) {\n        this.clickedInfo.isChangeStart = false;\n        eventName = \"modal-movestart\";\n      }\n\n      this.createModalEvent(eventName);\n      return;\n    }\n\n    this.redraw = false;\n\n    this._setCursor(this.boundStatus);\n  },\n\n  _setMaximize() {\n    if (!this.isSnap) {\n      this.isSnap = true;\n      this.preSnapped = {\n        x: this.rect.x,\n        y: this.rect.y,\n        width: this.rect.width,\n        height: this.rect.height\n      };\n\n      this.__setBound(this.el, 0, 0, \"100%\", \"100%\");\n    } else {\n      this.isSnap = false;\n      this.el.style.left = this.preSnapped.x + 'px';\n      this.el.style.top = this.preSnapped.y + 'px';\n      this.el.style.width = this.preSnapped.width + 'px';\n      this.el.style.height = this.preSnapped.height + 'px';\n    } // this.clickedInfo = null;\n\n  },\n\n  _setCursor(bound) {\n    let cursor = \"default\";\n    if (!this.isParked && bound.isRight && bound.isBottom || bound.isLeft && bound.isTop) cursor = 'nwse-resize';else if (!this.isParked && bound.isRight && bound.isTop || bound.isBottom && bound.left) cursor = 'nwsw-resize';else if (!this.isParked && bound.isRight || bound.isLeft) cursor = 'ew-resize';else if (!this.isParked && bound.isBottom || bound.isTop) cursor = 'ns-resize';else if (this._isMovable()) cursor = \"move\";\n    this.el.style.cursor = cursor;\n    this.setContainerEvent(cursor);\n  },\n\n  //. setParent Event\n  setContainerEvent(status) {\n    console.log(status);\n    if (!this.container) return;\n\n    if (status != 'default') {\n      this.container.style.pointerEvents = \"auto\";\n    } else {\n      this.container.style.pointerEvents = \"none\";\n    }\n  },\n\n  _isMovable() {\n    var width = this.rect.width;\n\n    if (this.isHeader) {\n      width -= 120;\n    }\n\n    return this.point.x > 0 && this.point.x < width && this.point.y > 0 && this.point.y < 50;\n  },\n\n  /**\n   * Modal Events\n   * resize: modal-resizing, modal-resizeend, modal-resizestart\n   * move: modal-moving, modal-moveend, modal-movestart\n   **/\n  createModalEvent(eventName) {\n    var event = new CustomEvent(eventName, {});\n    this.el.dispatchEvent(event);\n  },\n\n  _createTitle: function (n) {\n    var header_template = `<div class=\"nav bg-light-gray\"><ul class=\"modal-title-area\">\n          <li><a class=\"minimizeBtn\"><i class=\"far fa-window-minimize\"></i></a></li>\n          <li><a class=\"maximizeBtn\"><i class=\"far fa-window-restore\"></i></a></li>\n         <!-- <li><a class=\"parkBtn\"><i class=\"fas fa-dot-circle \"></i></a></li> -->\n          <li><a class=\"closeBtn\"><i class=\"fas fa-times\"></i></a></li>\n      </ul></div>`;\n    this.el.innerHTML = header_template + this.el.innerHTML;\n    this.headerArea = this.el.querySelector('.modal-title-area');\n  },\n  _createDragArea: function () {\n    this.dragArea = document.createElement(\"div\");\n    this.dragArea.classList.add(\"modal-drag-area\");\n    let left_area = document.createElement(\"div\");\n    left_area.classList.add(\"modal-drag-area-left\");\n    let right_area = document.createElement(\"div\");\n    right_area.classList.add(\"modal-drag-area-right\");\n    let bottom_area = document.createElement(\"div\");\n    bottom_area.classList.add(\"modal-drag-area-bottom\");\n    this.el.appendChild(this.dragArea);\n    this.el.appendChild(left_area);\n    this.el.appendChild(right_area);\n    this.el.appendChild(bottom_area);\n  },\n  resize: function (dx, dy, width, height) {\n    if (this.isSnap) {\n      return;\n    }\n\n    var borderHeight = this.el.offsetHeight - this.el.clientHeight;\n    var borderWidth = this.el.offsetWidth - this.el.clientWidth;\n    width = width - borderWidth;\n    height = height - borderHeight;\n    /** left, right **/\n\n    if (dx !== 0 && !this.isPercentDimesion(this.el.style.width)) {\n      var el_width = this.el.offsetWidth;\n\n      if (el_width + this.rect.left > width && dx < 0) {\n        this.el.style.left = this._setDimension(Math.max(0, this.rect.left + dx));\n      }\n\n      this.el.style.width = this._setDimension(Math.min(el_width, width));\n    }\n    /** top, bottom **/\n\n\n    if (dy !== 0 && !this.isPercentDimesion(this.el.style.height)) {\n      var el_height = this.el.offsetHeight;\n\n      if (el_height + this.rect.top > height && dy < 0) {\n        this.el.style.top = this._setDimension(Math.max(0, this.rect.top + dy));\n      }\n\n      this.el.style.height = this._setDimension(Math.min(el_height, height));\n    }\n\n    this.__setRectInfo();\n  },\n  _setDimension: function (data, isPercent) {\n    if (isPercent) {\n      return data + \"%\";\n    } else {\n      return data + \"px\";\n    }\n  },\n  isPercentDimesion: function (dimension) {\n    if (!dimension) return false;\n\n    if (typeof dimension === 'string' && dimension.substr(-1, 1) === \"%\") {\n      return true;\n    }\n\n    return false;\n  }\n};\nvar _default = Modal;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-modal/src/modal.js\n");

/***/ }),

/***/ "../CoCreate-components/CoCreate-modal/src/utils.js":
/*!**********************************************************!*\
  !*** ../CoCreate-components/CoCreate-modal/src/utils.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateUUID = generateUUID;\nexports.ModalStorage = void 0;\n\nfunction generateUUID(length) {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, \"\").substr(0, 6);\n  result += random;\n  return result;\n}\n\nvar ModalStorage = {};\nexports.ModalStorage = ModalStorage;\nObject.defineProperty(ModalStorage, \"rootPageId\", {\n  get: function () {\n    return window.localStorage.getItem('page_rootId');\n  },\n  set: function (id) {\n    window.localStorage.setItem('page_rootId', id);\n  }\n});\nObject.defineProperty(ModalStorage, \"parentPageId\", {\n  get: function () {\n    return window.localStorage.getItem('page_parentId');\n  },\n  set: function (id) {\n    window.localStorage.setItem('page_parentId', id);\n  }\n});\nObject.defineProperty(ModalStorage, \"pageId\", {\n  get: function () {\n    return window.localStorage.getItem('page_id');\n  },\n  set: function (id) {\n    window.localStorage.setItem('page_id', id);\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5tb2RhbC8uLi9Db0NyZWF0ZS1jb21wb25lbnRzL0NvQ3JlYXRlLW1vZGFsL3NyYy91dGlscy5qcz9hYmMxIl0sIm5hbWVzIjpbImdlbmVyYXRlVVVJRCIsImxlbmd0aCIsInJlc3VsdCIsImNoYXJhY3RlcnMiLCJjaGFyYWN0ZXJzTGVuZ3RoIiwiaSIsImNoYXJBdCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImQiLCJEYXRlIiwidG9UaW1lU3RyaW5nIiwicmVwbGFjZSIsInN1YnN0ciIsIk1vZGFsU3RvcmFnZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldCIsImlkIiwic2V0SXRlbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxTQUFTQSxZQUFULENBQXNCQyxNQUF0QixFQUE4QjtBQUM1QixNQUFJQyxNQUFNLEdBQWEsRUFBdkI7QUFDQSxNQUFJQyxVQUFVLEdBQVMsZ0VBQXZCO0FBQ0EsTUFBSUMsZ0JBQWdCLEdBQUdELFVBQVUsQ0FBQ0YsTUFBbEM7O0FBQ0EsT0FBTSxJQUFJSSxDQUFDLEdBQUcsQ0FBZCxFQUFpQkEsQ0FBQyxHQUFHSixNQUFyQixFQUE2QkksQ0FBQyxFQUE5QixFQUFtQztBQUNqQ0gsVUFBTSxJQUFJQyxVQUFVLENBQUNHLE1BQVgsQ0FBa0JDLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLE1BQUwsS0FBZ0JMLGdCQUEzQixDQUFsQixDQUFWO0FBQ0Q7O0FBRUQsTUFBSU0sQ0FBQyxHQUFHLElBQUlDLElBQUosR0FBV0MsWUFBWCxFQUFSO0FBQ0EsTUFBSUgsTUFBTSxHQUFHQyxDQUFDLENBQUNHLE9BQUYsQ0FBVSxTQUFWLEVBQXFCLEVBQXJCLEVBQXlCQyxNQUF6QixDQUFnQyxDQUFoQyxFQUFrQyxDQUFsQyxDQUFiO0FBQ0FaLFFBQU0sSUFBSU8sTUFBVjtBQUNBLFNBQU9QLE1BQVA7QUFDRDs7QUFFRCxJQUFJYSxZQUFZLEdBQUcsRUFBbkI7O0FBRUFDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkYsWUFBdEIsRUFBb0MsWUFBcEMsRUFBa0Q7QUFDaERHLEtBQUcsRUFBRSxZQUFXO0FBQUUsV0FBT0MsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixhQUE1QixDQUFQO0FBQW1ELEdBRHJCO0FBRWhEQyxLQUFHLEVBQUUsVUFBU0MsRUFBVCxFQUFhO0FBQUVKLFVBQU0sQ0FBQ0MsWUFBUCxDQUFvQkksT0FBcEIsQ0FBNEIsYUFBNUIsRUFBMkNELEVBQTNDO0FBQWlEO0FBRnJCLENBQWxEO0FBS0FQLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkYsWUFBdEIsRUFBb0MsY0FBcEMsRUFBb0Q7QUFDbERHLEtBQUcsRUFBRSxZQUFXO0FBQUUsV0FBT0MsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixlQUE1QixDQUFQO0FBQXFELEdBRHJCO0FBRWxEQyxLQUFHLEVBQUUsVUFBU0MsRUFBVCxFQUFhO0FBQUVKLFVBQU0sQ0FBQ0MsWUFBUCxDQUFvQkksT0FBcEIsQ0FBNEIsZUFBNUIsRUFBNkNELEVBQTdDO0FBQW1EO0FBRnJCLENBQXBEO0FBS0FQLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkYsWUFBdEIsRUFBb0MsUUFBcEMsRUFBOEM7QUFDNUNHLEtBQUcsRUFBRSxZQUFXO0FBQUUsV0FBT0MsTUFBTSxDQUFDQyxZQUFQLENBQW9CQyxPQUFwQixDQUE0QixTQUE1QixDQUFQO0FBQStDLEdBRHJCO0FBRTVDQyxLQUFHLEVBQUUsVUFBU0MsRUFBVCxFQUFhO0FBQUVKLFVBQU0sQ0FBQ0MsWUFBUCxDQUFvQkksT0FBcEIsQ0FBNEIsU0FBNUIsRUFBdUNELEVBQXZDO0FBQTZDO0FBRnJCLENBQTlDIiwiZmlsZSI6Ii4uL0NvQ3JlYXRlLWNvbXBvbmVudHMvQ29DcmVhdGUtbW9kYWwvc3JjL3V0aWxzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKGxlbmd0aCkge1xuICB2YXIgcmVzdWx0ICAgICAgICAgICA9ICcnO1xuICB2YXIgY2hhcmFjdGVycyAgICAgICA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gIHZhciBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7XG4gIGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XG4gIH1cbiAgXG4gIHZhciBkID0gbmV3IERhdGUoKS50b1RpbWVTdHJpbmcoKTtcbiAgdmFyIHJhbmRvbSA9IGQucmVwbGFjZSgvW1xcV19dKy9nLCBcIlwiKS5zdWJzdHIoMCw2KTtcbiAgcmVzdWx0ICs9IHJhbmRvbTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIE1vZGFsU3RvcmFnZSA9IHt9O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoTW9kYWxTdG9yYWdlLCBcInJvb3RQYWdlSWRcIiwge1xuICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwYWdlX3Jvb3RJZCcpO30sXG4gIHNldDogZnVuY3Rpb24oaWQpIHsgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwYWdlX3Jvb3RJZCcsIGlkKTsgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KE1vZGFsU3RvcmFnZSwgXCJwYXJlbnRQYWdlSWRcIiwge1xuICBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwYWdlX3BhcmVudElkJyk7fSxcbiAgc2V0OiBmdW5jdGlvbihpZCkgeyB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3BhZ2VfcGFyZW50SWQnLCBpZCk7IH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShNb2RhbFN0b3JhZ2UsIFwicGFnZUlkXCIsIHtcbiAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncGFnZV9pZCcpO30sXG4gIHNldDogZnVuY3Rpb24oaWQpIHsgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwYWdlX2lkJywgaWQpOyB9XG59KVxuXG5cbmV4cG9ydCB7Z2VuZXJhdGVVVUlELCBNb2RhbFN0b3JhZ2V9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../CoCreate-components/CoCreate-modal/src/utils.js\n");

/***/ })

/******/ })["default"];
});