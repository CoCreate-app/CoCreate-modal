(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["CoCreateModal"] = factory();
	else
		root["CoCreateModal"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./CoCreate-components/CoCreate-modal/src/CoCreate-modal.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./CoCreate-components/CoCreate-modal/src/CoCreate-modal.js":
/*!******************************************************************!*\
  !*** ./CoCreate-components/CoCreate-modal/src/CoCreate-modal.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nwindow.mobilecheck = function () {\n  var check = false;\n\n  (function (a) {\n    if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true;\n  })(navigator.userAgent || navigator.vendor || window.opera);\n\n  return check;\n};\n\nfunction CoCreateModal(el, options, container) {\n  if (!(el && el.nodeType && el.nodeType === 1)) {\n    return;\n  }\n  /** define constant **/\n\n\n  this.MARGIN = 5;\n  this.FULLSCREEN_MARGIN = -20;\n  this.NO_SNAP = -31;\n  this.SNAP_MARGIN = -10;\n  this.RIGHT_SCROL = 5; // \tif (window.mobilecheck()) {\n  // \t  this.MARGIN = 20;\n  // \t}\n\n  /** options **/\n\n  var defaults = {\n    minWidth: 60,\n    minHeight: 40\n  };\n  this.id = CoCreateWindow.generateUUID(20);\n  this.el = el;\n  this.clicked = null;\n  this.redraw = false;\n  this.boundStatus = {};\n  /**\n   * x: mouse x in element\n   * y: mouse y in element\n   * cx: x in document\n   * cy: y in document\n   * */\n\n  this.point = {};\n  this.rect = {};\n  this.clickedInfo = null;\n  this.preSnapped = null;\n  this.prevRect = {};\n  this.isSnap = false;\n  this.isHeader = true;\n  this.dragArea = null;\n  this.headerArea = null;\n  this.width = 0;\n  this.height = 0;\n  this.isParked = false;\n  this.iframe = null;\n  this.container = container;\n  this.options = Object.assign(defaults, options);\n  this.el.setAttribute(\"id\", this.id);\n  CoCreateStorage.pageId = this.id;\n\n  this._init();\n\n  this._setModalSize();\n\n  this._initEvent();\n\n  this._animate();\n}\n\nCoCreateModal.prototype = {\n  constructor: CoCreateModal,\n  _init: function _init() {\n    var opt = this.options;\n    this.isAjax = opt.ajax ? opt.ajax : this.el.getAttribute(\"data-modal_ajax\");\n    var windowURL = opt.url ? opt.url : this.el.getAttribute(\"href\");\n    var width = opt.width ? opt.width : this.el.getAttribute(\"data-modal_width\");\n    var height = opt.height ? opt.height : this.el.getAttribute(\"data-modal_height\");\n    var color = opt.color ? opt.color : this.el.getAttribute(\"data-modal_color\");\n    var x = opt.x ? opt.x : this.el.getAttribute(\"data-modal_x\");\n    var y = opt.y ? opt.y : this.el.getAttribute(\"data-modal_y\");\n    var showHeader = opt.header ? opt.header : this.el.getAttribute(\"data-modal_header\");\n    var attributes = opt.attributes; //. set default\n    // this.el.style.width = \"300px\";\n    // this.el.style.height = \"100%\";\n    // this.el.style.left = 0;\n    // this.el.style.right = 0;\n    // this.el.style.borderColor = \"#888\";\n\n    if (width && width != \"\") {\n      this.el.style.width = width;\n    } else {\n      this.el.style.width = \"600px\";\n    }\n\n    if (height && height != \"\") {\n      this.el.style.height = height;\n    } else {\n      this.el.style.height = \"100%\";\n    }\n\n    if (this.el.parentElement.clientWidth < this.el.clientWidth) {\n      this.el.style.width = \"100%\";\n    }\n\n    if (this.el.parentElement.clientHeight < this.el.clientHeight) {\n      this.el.style.width = \"100%\";\n    }\n\n    if (x && x != \"\") {\n      this.el.style.left = x;\n    } else {\n      var hX = (this.el.parentElement.clientWidth - this.el.offsetWidth) / 2;\n      hX = hX > 0 ? hX : 0;\n      this.el.style.left = hX + \"px\";\n    }\n\n    if (y && y != \"\") {\n      this.el.style.top = y;\n    } else {\n      var hY = (this.el.parentElement.clientHeight - this.el.offsetHeight) / 2;\n      hY = hY > 0 ? hY : 0;\n      this.el.style.top = hY + \"px\";\n    }\n\n    if (color && color !== \"\") this.el.style.borderColor = color;\n\n    if (showHeader == \"true\") {\n      this.isHeader = true;\n\n      this._createTitle();\n    } else {\n      this.isHeader = false;\n\n      this._createDragArea();\n    }\n\n    this.el.innerHTML = this.el.innerHTML + \"<div class=\\\"parked-closeBtn\\\"><i class=\\\"fas fa-times closeBtn\\\"></i></div>\";\n    var iframe = null;\n\n    if (windowURL && windowURL != \"\") {\n      iframe = this.__createContainer(this.headerArea);\n      iframe.src = windowURL;\n    } else if (attributes) {\n      iframe = this.__createContainer(this.headerArea, attributes['data-modal_iframe'] === \"false\" ? \"div\" : \"iframe\");\n\n      if (attributes['data-pass_to']) {\n        iframe.setAttribute('data-pass_id', attributes['data-pass_to']);\n        iframe.setAttribute('data-collection', \"\");\n        iframe.setAttribute('data-document_id', \"\");\n        iframe.setAttribute('data-request_id', CoCreateWindow.generateUUID(20));\n      }\n\n      if (attributes['data-pass_name']) {\n        iframe.setAttribute('name', attributes['data-pass_name']);\n      }\n    } else {\n      return;\n    }\n\n    this.el.appendChild(iframe);\n    this.iframe = iframe;\n  },\n  __createContainer: function __createContainer(isHeader, type) {\n    var tag = type || \"iframe\";\n    var container = document.createElement(tag);\n    container.style.width = \"100%\";\n    container.style.height = \"100%\";\n\n    if (isHeader) {\n      container.style.height = \"calc(100% - 45px)\";\n    }\n\n    if (type != \"iframe\") {\n      container.setAttribute('class', 'domEditor');\n    }\n\n    return container;\n  },\n  _initEvent: function _initEvent() {\n    var _this = this;\n\n    if (this.iframe) {\n      this.iframe.addEventListener('load', function () {\n        console.log(_this.iframe.contentDocument);\n        var iframeContent = _this.iframe.contentDocument;\n        var nav = iframeContent.querySelector('.nav');\n        iframeContent.addEventListener('click', function () {\n          var event = new CustomEvent(\"cocreate-selectmodal\", {\n            detail: {\n              modal: _this\n            }\n          });\n\n          _this.el.parentNode.dispatchEvent(event);\n        });\n      });\n    }\n\n    this.el.addEventListener(\"click\", function (e) {\n      var event = new CustomEvent(\"cocreate-selectmodal\", {\n        detail: {\n          modal: _this\n        }\n      });\n\n      _this.el.parentNode.dispatchEvent(event);\n    }, true);\n    this.el.addEventListener(\"dblclick\", function (e) {\n      if (_this.isParked) {\n        _this.isParked = false;\n\n        _this.el.classList.remove(\"modal-parked\");\n      }\n    });\n    this.el.addEventListener('modal-resizing', function (e) {\n      console.log('resizing event trigger');\n    });\n    this.el.addEventListener('touchstart', function (e) {\n      _this.changeRightDragEl(true);\n\n      var event = new CustomEvent(\"cocreate-selectmodal\", {\n        detail: {\n          modal: _this\n        }\n      });\n\n      _this.el.parentNode.dispatchEvent(event);\n\n      _this._onDown(e.touches[0]);\n\n      console.log('--------------------------------'); // e.preventDefault();\n    });\n    this.el.addEventListener('mousemove', function (e) {\n      _this.changeRightDragEl(false);\n    });\n    this.el.addEventListener('mousedown', function (e) {\n      var event = new CustomEvent(\"cocreate-selectmodal\", {\n        detail: {\n          modal: _this\n        }\n      });\n\n      _this.el.parentNode.dispatchEvent(event);\n\n      _this._onDown(e);\n    });\n    this.el.addEventListener('mouseup', function (e) {// _this.changeRightDragEl(true);\n    });\n\n    this._addButtonEvent();\n\n    this.el.addEventListener(\"modal-resizeend\", function (e) {\n      _this._saveFetch(); // _this.changeRightDragEl(true);\n\n    });\n    this.el.addEventListener(\"modal-moveend\", function (e) {\n      _this._saveFetch(); // _this.changeRightDragEl(true);\n\n    });\n  },\n  changeRightDragEl: function changeRightDragEl() {\n    var isRevert = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var right_el = this.el.querySelector('.modal-drag-area-right');\n    var size = isRevert ? \"0px\" : \"-10px\";\n\n    if (right_el) {\n      right_el.style.right = size;\n    }\n\n    this.RIGHT_SCROL = !isRevert ? 0 : 5;\n  },\n  _addButtonEvent: function _addButtonEvent() {\n    var _this = this;\n\n    if (this.el.querySelector(\".modal-title-area .closeBtn\")) {\n      this.el.querySelector(\".modal-title-area .closeBtn\").addEventListener(\"click\", function (e) {\n        e.preventDefault();\n\n        _this.el.parentNode.dispatchEvent(new CustomEvent(\"cocreate-removemodal\", {\n          detail: {\n            modal: _this\n          }\n        }));\n      });\n    }\n\n    if (this.el.querySelector(\".parked-closeBtn .closeBtn\")) {\n      this.el.querySelector(\".parked-closeBtn .closeBtn\").addEventListener(\"click\", function (e) {\n        e.preventDefault();\n\n        _this.el.parentNode.dispatchEvent(new CustomEvent(\"cocreate-removemodal\", {\n          detail: {\n            modal: _this\n          }\n        }));\n      });\n    }\n\n    if (this.el.querySelector(\".modal-title-area .maximizeBtn\")) {\n      this.el.querySelector(\".modal-title-area .maximizeBtn\").addEventListener(\"click\", function (e) {\n        e.preventDefault();\n\n        _this._setMaximize();\n      });\n    }\n\n    if (this.el.querySelector(\".modal-title-area .minimizeBtn\")) {\n      this.el.querySelector(\".modal-title-area .minimizeBtn\").addEventListener(\"click\", function (e) {\n        e.preventDefault();\n\n        _this.togglePark();\n      });\n    } // if (this.el.querySelector(\".modal-title-area .parkBtn\")) {\n    //   this.el.querySelector(\".modal-title-area .parkBtn\").addEventListener(\"click\", function(e) {\n    //     _this.togglePark()\n    //   })\n    // }\n\n  },\n  togglePark: function togglePark() {\n    if (this.isParked) {\n      this.isParked = false;\n      this.el.classList.remove(\"modal-parked\");\n    } else {\n      this.isParked = true;\n      this.el.classList.add(\"modal-parked\");\n    }\n  },\n  _setModalSize: function _setModalSize() {\n    var bound = this.el.getBoundingClientRect();\n    var parentBound = this.el.parentNode.getBoundingClientRect();\n    this.width = bound.width;\n    this.height = bound.height;\n    this.el.style.left = bound.left - parentBound.left;\n    this.el.style.top = bound.top - parentBound.top;\n  },\n  _saveFetch: function _saveFetch() {\n    if (this.el.classList.contains(\"domEditor\")) {\n      // saveHtml(this.el);\n      CoCreateHtmlTags.save(this.el);\n    }\n  },\n  _onMove: function _onMove(e) {\n    var data = this._getBoundStatus(e);\n\n    this.redraw = true;\n  },\n  _onDown: function _onDown(e) {\n    //. set clicked\n    this._getBoundStatus(e);\n\n    var isResizing = this.boundStatus.isRight || this.boundStatus.isLeft || this.boundStatus.isTop || this.boundStatus.isBottom;\n    this.clickedInfo = {\n      x: this.point.x,\n      y: this.point.y,\n      cx: this.point.cx,\n      cy: this.point.cy,\n      w: this.rect.width,\n      h: this.rect.height,\n      isResizing: isResizing,\n      isMoving: !isResizing && this._isMovable(),\n      boundStatus: this.boundStatus,\n      isChangeStart: true\n    };\n  },\n  _onUp: function _onUp(e) {\n    if (e) {\n      this._getBoundStatus(e);\n    }\n\n    if (!this.clickedInfo) {\n      return;\n    }\n\n    if (this.clickedInfo.isMoving && !this.isParked) {\n      var p_w = this.el.parentNode.offsetWidth,\n          p_h = this.el.parentNode.offsetHeight;\n      var snap_info = null;\n\n      if (this._between(this.rect.top, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this._between(this.rect.left, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this._between(p_w - this.rect.right, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this._between(p_h - this.rect.bottom, this.NO_SNAP, this.FULLSCREEN_MARGIN)) {\n        snap_info = {\n          x: 0,\n          y: 0,\n          w: '100%',\n          h: '100%'\n        };\n      } else if (this._between(this.rect.top, this.NO_SNAP, this.SNAP_MARGIN)) {\n        snap_info = {\n          x: 0,\n          y: 0,\n          w: '100%',\n          h: '50%'\n        };\n      } else if (this._between(this.rect.left, this.NO_SNAP, this.SNAP_MARGIN)) {\n        snap_info = {\n          x: 0,\n          y: 0,\n          w: '50%',\n          h: '100%'\n        };\n      } else if (this._between(p_w - this.rect.right, this.NO_SNAP, this.SNAP_MARGIN)) {\n        snap_info = {\n          x: '50%',\n          y: 0,\n          w: '50%',\n          h: '100%'\n        };\n      } else if (this._between(p_h - this.rect.bottom, this.NO_SNAP, this.SNAP_MARGIN)) {\n        snap_info = {\n          x: 0,\n          y: '50%',\n          w: '100%',\n          h: '50%'\n        };\n      }\n\n      if (snap_info && !this.isSnap) {\n        this._setBound(this.el, snap_info.x, snap_info.y, snap_info.w, snap_info.h);\n\n        this.preSnapped = {\n          x: this.rect.x,\n          y: this.rect.y,\n          width: this.rect.width,\n          height: this.rect.height\n        };\n        this.isSnap = true;\n      }\n\n      var ghost_info = {\n        x: this.rect.x,\n        y: this.rect.y,\n        w: this.rect.width,\n        h: this.rect.height\n      };\n      this.el.parentNode.dispatchEvent(new CustomEvent(\"cocreate-modalghost\", {\n        detail: ghost_info\n      }));\n    }\n\n    if (this.clickedInfo.isResizing) {\n      this.createModalEvent('modal-resizeend');\n\n      this._setModalSize();\n\n      this.isSnap = false;\n    } else if (this.clickedInfo.isMoving) {\n      this.createModalEvent('modal-moveend');\n    }\n\n    this.clickedInfo = null;\n  },\n  _setBound: function _setBound(el, x, y, w, h) {\n    var borderHeight = this.el.offsetHeight - this.el.clientHeight;\n    var borderWidth = this.el.offsetWidth - this.el.clientWidth;\n    el.style.left = x;\n    el.style.top = y; // el.style.width = \"calc( \" + w + \" - \" + borderWidth + \"px )\";\n    // el.style.height = \"calc( \"  + h + \" - \" + borderHeight + \"px )\";\n\n    el.style.width = w;\n    el.style.height = h;\n  },\n  _setRectInfo: function _setRectInfo() {\n    var bound = this.el.getBoundingClientRect();\n    var parentRect = this.el.parentNode.getBoundingClientRect();\n    this.rect = {};\n    this.rect.x = bound.x - parentRect.x;\n    this.rect.y = bound.y - parentRect.y;\n    this.rect.width = bound.width;\n    this.rect.height = bound.height;\n    this.rect.top = bound.top - parentRect.top;\n    this.rect.bottom = bound.bottom - parentRect.top;\n    this.rect.left = bound.left - parentRect.left;\n    this.rect.right = bound.right - parentRect.left;\n  },\n  _getBoundStatus: function _getBoundStatus(e) {\n    var bound = this.el.getBoundingClientRect();\n    var parentRect = this.el.parentNode.getBoundingClientRect();\n    var x = e.clientX - bound.left; // - parentRect.left;\n\n    var y = e.clientY - bound.top; // - parentRect.top;\n\n    this._setRectInfo();\n\n    this.point.x = x;\n    this.point.y = y;\n    this.point.cx = e.clientX - parentRect.left;\n    this.point.cy = e.clientY - parentRect.top;\n    this.boundStatus = {\n      isTop: y < this.MARGIN && y > -this.MARGIN,\n      isLeft: x < this.MARGIN && x > -this.MARGIN,\n      isRight: x >= bound.width - this.RIGHT_SCROL && x <= bound.width + this.MARGIN + (this.MARGIN - this.RIGHT_SCROL),\n      isBottom: y >= bound.height - this.MARGIN && y <= bound.height + this.MARGIN\n    };\n    return this.boundStatus;\n  },\n  _between: function _between(x, min, max) {\n    return x >= min && x <= max;\n  },\n  _animate: function _animate() {\n    var _this = this;\n\n    requestAnimationFrame(function () {\n      _this._animate();\n    });\n\n    if (!this.redraw) {\n      return;\n    }\n\n    this.redraw = false;\n    var c_info = this.clickedInfo;\n    var eventName = null;\n    /**\n     * Resize process\n     **/\n\n    if (c_info && c_info.isResizing && !this.isParked) {\n      if (c_info.boundStatus.isRight) this.el.style.width = Math.max(this.point.x, this.options.minWidth) + 'px';\n\n      if (c_info.boundStatus.isBottom) {\n        this.el.style.height = Math.max(this.point.y, this.options.minHeight) + 'px';\n      }\n\n      if (c_info.boundStatus.isLeft) {\n        var c_width = Math.max(c_info.cx - this.point.cx + c_info.w, this.options.minWidth);\n\n        if (c_width > this.options.minWidth) {\n          this.el.style.width = c_width + 'px';\n          this.el.style.left = this.point.cx + 'px';\n        }\n      }\n\n      if (c_info.boundStatus.isTop) {\n        var c_height = Math.max(c_info.cy - this.point.cy + c_info.h, this.options.minHeight);\n\n        if (c_height > this.options.minHeight) {\n          this.el.style.height = c_height + 'px';\n          this.el.style.top = this.point.cy + 'px';\n        }\n      }\n\n      eventName = \"modal-resizing\";\n\n      if (c_info.isChangeStart) {\n        this.clickedInfo.isChangeStart = false;\n        eventName = \"modal-resizestart\";\n      }\n\n      this.createModalEvent(eventName);\n      return;\n    }\n\n    if (c_info && c_info.isMoving) {\n      /** \n       * Ghost Process\n       **/\n      var p_w = this.el.parentNode.offsetWidth,\n          p_h = this.el.parentNode.offsetHeight;\n      var ghost_info = null;\n\n      if (this._between(this.rect.top, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this._between(this.rect.left, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this._between(p_w - this.rect.right, this.NO_SNAP, this.FULLSCREEN_MARGIN) || this._between(p_h - this.rect.bottom, this.NO_SNAP, this.FULLSCREEN_MARGIN)) {\n        ghost_info = {\n          x: 0,\n          y: 0,\n          w: p_w,\n          h: p_h,\n          type: \"show\"\n        };\n      } else if (this._between(this.rect.top, this.NO_SNAP, this.SNAP_MARGIN)) {\n        ghost_info = {\n          x: 0,\n          y: 0,\n          w: p_w,\n          h: p_h / 2,\n          type: \"show\"\n        };\n      } else if (this._between(this.rect.left, this.NO_SNAP, this.SNAP_MARGIN)) {\n        ghost_info = {\n          x: 0,\n          y: 0,\n          w: p_w / 2,\n          h: p_h,\n          type: \"show\"\n        };\n      } else if (this._between(p_w - this.rect.right, this.NO_SNAP, this.SNAP_MARGIN)) {\n        ghost_info = {\n          x: p_w / 2,\n          y: 0,\n          w: p_w / 2,\n          h: p_h,\n          type: \"show\"\n        };\n      } else if (this._between(p_h - this.rect.bottom, this.NO_SNAP, this.SNAP_MARGIN)) {\n        ghost_info = {\n          x: 0,\n          y: p_h / 2,\n          w: p_w,\n          h: p_h / 2,\n          type: \"show\"\n        };\n      } else {\n        ghost_info = {\n          x: this.rect.left,\n          y: this.rect.top,\n          w: this.rect.width,\n          h: this.rect.height,\n          type: \"hide\"\n        };\n      }\n\n      if (ghost_info && !this.isParked && !this.isSnap) {\n        this.el.parentNode.dispatchEvent(new CustomEvent(\"cocreate-modalghost\", {\n          detail: ghost_info\n        }));\n      }\n\n      if (this.isSnap) {\n        // this.el.style.left = (this.point.cx - this.preSnapped.width / 2) + 'px';\n        // this.el.style.top = (this.point.cy - Math.min(c_info.y, this.preSnapped.height)) + 'px';\n        this.el.style.left = this.point.cx + 'px';\n        this.el.style.top = this.point.cy + 'px';\n        this.el.style.width = this.preSnapped.width + 'px';\n        this.el.style.height = this.preSnapped.height + 'px';\n        this.isSnap = false;\n      } else {\n        this.el.style.top = this.point.cy - c_info.y + 'px';\n        this.el.style.left = this.point.cx - c_info.x + 'px';\n      }\n\n      eventName = \"modal-moving\";\n\n      if (c_info.isChangeStart) {\n        this.clickedInfo.isChangeStart = false;\n        eventName = \"modal-movestart\";\n      }\n\n      this.createModalEvent(eventName);\n      return;\n    }\n\n    this.redraw = false;\n\n    this._setCursor(this.boundStatus);\n  },\n  _setMaximize: function _setMaximize() {\n    if (!this.isSnap) {\n      this.isSnap = true;\n      this.preSnapped = {\n        x: this.rect.x,\n        y: this.rect.y,\n        width: this.rect.width,\n        height: this.rect.height\n      };\n\n      this._setBound(this.el, 0, 0, \"100%\", \"100%\");\n    } else {\n      this.isSnap = false;\n      this.el.style.left = this.preSnapped.x + 'px';\n      this.el.style.top = this.preSnapped.y + 'px';\n      this.el.style.width = this.preSnapped.width + 'px';\n      this.el.style.height = this.preSnapped.height + 'px';\n    } // this.clickedInfo = null;\n\n  },\n  _setCursor: function _setCursor(bound) {\n    var cursor = \"default\";\n    if (!this.isParked && bound.isRight && bound.isBottom || bound.isLeft && bound.isTop) cursor = 'nwse-resize';else if (!this.isParked && bound.isRight && bound.isTop || bound.isBottom && bound.left) cursor = 'nwsw-resize';else if (!this.isParked && bound.isRight || bound.isLeft) cursor = 'ew-resize';else if (!this.isParked && bound.isBottom || bound.isTop) cursor = 'ns-resize';else if (this._isMovable()) cursor = \"move\";\n    this.el.style.cursor = cursor;\n    this.setContainerEvent(cursor);\n  },\n  //. setParent Event\n  setContainerEvent: function setContainerEvent(status) {\n    console.log(status);\n    if (!this.container) return;\n\n    if (status != 'default') {\n      this.container.style.pointerEvents = \"auto\";\n    } else {\n      this.container.style.pointerEvents = \"none\";\n    }\n  },\n  _isMovable: function _isMovable() {\n    var width = this.rect.width;\n\n    if (this.isHeader) {\n      width -= 120;\n    }\n\n    return this.point.x > 0 && this.point.x < width && this.point.y > 0 && this.point.y < 50;\n  },\n\n  /**\n   * Modal Events\n   * resize: modal-resizing, modal-resizeend, modal-resizestart\n   * move: modal-moving, modal-moveend, modal-movestart\n   **/\n  createModalEvent: function createModalEvent(eventName) {\n    var event = new CustomEvent(eventName, {});\n    this.el.dispatchEvent(event);\n  },\n  _createTitle: function _createTitle(n) {\n    var header_template = \"<div class=\\\"nav bg-light-gray\\\"><ul class=\\\"modal-title-area\\\">\\n          <li><a class=\\\"minimizeBtn\\\"><i class=\\\"far fa-window-minimize\\\"></i></a></li>\\n          <li><a class=\\\"maximizeBtn\\\"><i class=\\\"far fa-window-restore\\\"></i></a></li>\\n         <!-- <li><a class=\\\"parkBtn\\\"><i class=\\\"fas fa-dot-circle \\\"></i></a></li> -->\\n          <li><a class=\\\"closeBtn\\\"><i class=\\\"fas fa-times\\\"></i></a></li>\\n      </ul></div>\";\n    this.el.innerHTML = header_template + this.el.innerHTML;\n    this.headerArea = this.el.querySelector('.modal-title-area');\n  },\n  _createDragArea: function _createDragArea() {\n    this.dragArea = document.createElement(\"div\");\n    this.dragArea.classList.add(\"modal-drag-area\");\n    var left_area = document.createElement(\"div\");\n    left_area.classList.add(\"modal-drag-area-left\");\n    var right_area = document.createElement(\"div\");\n    right_area.classList.add(\"modal-drag-area-right\");\n    var bottom_area = document.createElement(\"div\");\n    bottom_area.classList.add(\"modal-drag-area-bottom\");\n    this.el.appendChild(this.dragArea);\n    this.el.appendChild(left_area);\n    this.el.appendChild(right_area);\n    this.el.appendChild(bottom_area);\n  },\n  resize: function resize(dx, dy, width, height) {\n    if (this.isSnap) {\n      return;\n    }\n\n    var borderHeight = this.el.offsetHeight - this.el.clientHeight;\n    var borderWidth = this.el.offsetWidth - this.el.clientWidth;\n    width = width - borderWidth;\n    height = height - borderHeight;\n    /** left, right **/\n\n    if (dx !== 0 && !this.isPercentDimesion(this.el.style.width)) {\n      var el_width = this.el.offsetWidth;\n\n      if (el_width + this.rect.left > width && dx < 0) {\n        this.el.style.left = this._setDimension(Math.max(0, this.rect.left + dx));\n      }\n\n      this.el.style.width = this._setDimension(Math.min(el_width, width));\n    }\n    /** top, bottom **/\n\n\n    if (dy !== 0 && !this.isPercentDimesion(this.el.style.height)) {\n      var el_height = this.el.offsetHeight;\n\n      if (el_height + this.rect.top > height && dy < 0) {\n        this.el.style.top = this._setDimension(Math.max(0, this.rect.top + dy));\n      }\n\n      this.el.style.height = this._setDimension(Math.min(el_height, height));\n    }\n\n    this._setRectInfo();\n  },\n  _setDimension: function _setDimension(data, isPercent) {\n    if (isPercent) {\n      return data + \"%\";\n    } else {\n      return data + \"px\";\n    }\n  },\n  isPercentDimesion: function isPercentDimesion(dimension) {\n    if (!dimension) return false;\n\n    if (typeof dimension === 'string' && dimension.substr(-1, 1) === \"%\") {\n      return true;\n    }\n\n    return false;\n  }\n};\n/**\n * CoCreateModalContainer Object\n * \n **/\n\nfunction CoCreateModalContainer(el) {\n  this.modals = [];\n  this.el = el;\n  this.modalClass = this.el.getAttribute(\"data-modal-class\");\n  this.SELECT_ZINDEX = 10;\n  this.UNSELECT_ZINDEX = 2;\n  this.ghostEl = null;\n  this.width = 0;\n  this.height = 0;\n  this.selectedModal = null;\n\n  if (!this.modalClass) {\n    this.modalClass = \"modal\";\n  }\n\n  this._createGhost(this.el.getAttribute(\"data-ghost-class\"));\n\n  this._initModals();\n\n  this._initEvent();\n}\n\nCoCreateModalContainer.prototype = {\n  _createGhost: function _createGhost(ghostClass) {\n    var node = document.createElement(\"div\");\n\n    if (!ghostClass) {\n      ghostClass = \"modal-ghost\";\n    }\n\n    node.classList.add(ghostClass);\n    this.el.appendChild(node);\n    this.ghostEl = node;\n  },\n  _initModals: function _initModals() {\n    var el_children = document.querySelectorAll(\".\" + this.modalClass);\n\n    for (var i = 0; i < el_children.length; i++) {\n      this.modals.push(new CoCreateModal(el_children[i], {}, this.el));\n    }\n\n    if (!this.selectedModal) {\n      this._selectModal(this.modals[this.modals.length - 1]);\n    }\n  },\n  _initEvent: function _initEvent() {\n    var _this = this;\n\n    this.el.addEventListener('mousemove', function (e) {\n      e.preventDefault();\n\n      if (_this.selectedModal) {\n        _this.selectedModal._onMove(e);\n      }\n    });\n    this.el.addEventListener('mouseup', function (e) {\n      if (_this.selectedModal) {\n        _this.selectedModal._onUp(e);\n      }\n\n      e.preventDefault();\n    }, true);\n    this.el.addEventListener('touchmove', function (e) {\n      // e.preventDefault();\n      if (_this.selectedModal) {\n        _this.selectedModal._onMove(e.touches[0]);\n      }\n    });\n    this.el.addEventListener('touchend', function (e) {\n      // e.preventDefault();\n      if (_this.selectedModal) {\n        _this.selectedModal._onUp(e.touches[0]);\n      }\n    });\n    this.el.addEventListener('cocreate-selectmodal', function (e) {\n      if (_this.selectedModal) {\n        _this._selectModal(e.detail.modal);\n      }\n    });\n    this.el.addEventListener('cocreate-modalghost', function (e) {\n      if (_this.selectedModal) {\n        _this._ghostProcess(e.detail);\n      }\n    });\n    this.el.addEventListener('cocreate-removemodal', function (e) {\n      if (_this.selectedModal) {\n        _this._removeModal(e.detail.modal);\n      }\n    });\n\n    this._initResizeEvent();\n  },\n  _initResizeEvent: function _initResizeEvent() {\n    var _this = this;\n\n    var bound = this.el.getBoundingClientRect();\n    this.width = bound.width;\n    this.height = bound.height;\n    var ro = new ResizeObserver(function (entries, observer) {\n      var contentRect = entries[0].contentRect;\n\n      _this._resizeProcess(_this.width, _this.height, contentRect.width, contentRect.height);\n    });\n    ro.observe(this.el);\n  },\n  _resizeProcess: function _resizeProcess(prevWidth, prevHeight, width, height) {\n    this.width = width;\n    this.height = height;\n\n    if (prevWidth == width && prevHeight == height) {\n      return;\n    }\n\n    var dx = width - prevWidth;\n    var dy = height - prevHeight;\n\n    for (var i = 0; i < this.modals.length; i++) {\n      this.modals[i].resize(dx, dy, width, height);\n    }\n  },\n  _createModal: function _createModal(attr) {\n    var node = document.createElement(\"div\");\n    node.classList.add(this.modalClass);\n    node.style.zIndex = this.SELECT_ZINDEX;\n    this.el.appendChild(node);\n    var modal = new CoCreateModal(node, attr, this.el);\n    this.modals.push(modal);\n\n    this._selectModal(node);\n  },\n  _releaseSelect: function _releaseSelect() {\n    if (!this.selectedModal) {\n      return;\n    }\n\n    this.selectedModal.el.style.zIndex = this.UNSELECT_ZINDEX;\n    this.selectedModal.el.classList.remove(\"modal_selected\");\n    this.selectedModal = null;\n  },\n  _selectModal: function _selectModal(el) {\n    var modal = this._findModalByElement(el);\n\n    if (modal == this.selectedModal) {\n      return;\n    }\n\n    this._releaseSelect();\n\n    this.selectedModal = modal;\n\n    if (this.selectedModal) {\n      this.selectedModal.el.style.zIndex = this.SELECT_ZINDEX;\n      this.selectedModal.el.classList.add('modal_selected');\n      this.ghostEl.style.width = 0;\n      this.ghostEl.style.height = 0;\n    }\n  },\n  _findModalByElement: function _findModalByElement(el) {\n    if (el instanceof CoCreateModal) {\n      return el;\n    }\n\n    for (var i = 0; i < this.modals.length; i++) {\n      if (this.modals[i].el.isEqualNode(el)) {\n        return this.modals[i];\n      }\n    }\n\n    return null;\n  },\n  getModalById: function getModalById(id) {\n    for (var i = 0; i < this.modals.length; i++) {\n      if (this.modals[i].id == id) {\n        return this.modals[i];\n      }\n    }\n\n    return null;\n  },\n  _ghostProcess: function _ghostProcess(info) {\n    this.ghostEl.style.left = info.x + 'px';\n    this.ghostEl.style.top = info.y + 'px';\n    this.ghostEl.style.width = info.w + 'px';\n    this.ghostEl.style.height = info.h + 'px';\n\n    if (info.type === \"show\") {\n      if (this.ghostEl.style.display === 'none') {\n        this.ghostEl.style.display = 'block';\n      }\n\n      this.ghostEl.style.opacity = 0.2;\n    } else {\n      this.ghostEl.style.opacity = 0;\n\n      if (this.ghostEl.style.display !== 'none') {\n        this.ghostEl.style.display = 'none';\n      }\n    }\n\n    return;\n  },\n  _removeModal: function _removeModal(modal) {\n    for (var i = 0; i < this.modals.length; i++) {\n      if (this.modals[i] === modal) {\n        this.el.removeChild(modal.el);\n        this.modals.splice(i, 1);\n        break;\n      }\n    }\n\n    if (this.modals.length > 0) {\n      this._selectModal(this.modals[this.modals.length - 1]);\n    } else {\n      this.selectedModal = null;\n    }\n\n    this.el.style.pointerEvents = \"none\";\n  }\n};\n/* ========================================================================= */\n\nfunction CoCreateWindow(id) {\n  var container_id = id ? id : 'modal-viewport';\n  this.container = null;\n  this.id = container_id;\n  this.pageId = CoCreateWindow.generateUUID(20);\n  this.isRoot = this._checkRoot();\n\n  if (!this.isRoot) {\n    this.parentId = CoCreateStorage.parentPageId;\n    this.pageId = CoCreateStorage.pageId;\n    this.rootId = CoCreateStorage.rootPageId;\n  } else {\n    CoCreateStorage.rootPageId = this.pageId;\n    this.rootId = this.pageId;\n    this.parentId = this.pageId;\n  }\n\n  this._createContainer();\n\n  this._initWndButtons();\n\n  this._initSocket(); //. set parent_id and page_id for test \n\n\n  var html = document.querySelector(\"html\");\n  html.setAttribute(\"test-parent_id\", this.parentId);\n  html.setAttribute(\"test-page_id\", this.pageId);\n}\n\nCoCreateWindow.prototype = {\n  _checkRoot: function _checkRoot() {\n    try {\n      return window.self === window.top;\n    } catch (e) {\n      return false;\n    }\n  },\n  _createContainer: function _createContainer() {\n    if (this.container) {\n      return true;\n    }\n\n    var el = document.getElementById(this.id);\n\n    if (el) {\n      this.container = new CoCreateModalContainer(el);\n      return true;\n    } else {\n      return false;\n    }\n  },\n  _initWndButtons: function _initWndButtons() {\n    var closeBtns = document.querySelectorAll('.btn-modal-close');\n    var minmaxBtn = document.querySelector('.btn-modal-maximize');\n    var parkBtn = document.querySelector('.btn-modal-minimize');\n\n    var _this = this;\n\n    if (closeBtns.length > 0) {\n      for (var i = 0; i < closeBtns.length; i++) {\n        var closeBtn = closeBtns[i];\n        closeBtn.addEventListener('click', function (e) {\n          e.preventDefault();\n\n          _this.sendWindowBtnEvent('close');\n        });\n      }\n    }\n\n    if (minmaxBtn) {\n      minmaxBtn.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        _this.sendWindowBtnEvent('maximize'); // let state = this.getAttribute('data-state');\n        // if (state == 'min') {\n        //   _this.sendWindowBtnEvent('minimize');\n        //   this.setAttribute('data-state', 'max');\n        // } else {\n        //   _this.sendWindowBtnEvent('maximize');\n        //   this.setAttribute('data-state', 'min');\n        // }\n\n      });\n    }\n\n    if (parkBtn) {\n      parkBtn.addEventListener('click', function (e) {\n        e.preventDefault();\n\n        _this.sendWindowBtnEvent('park');\n      });\n    }\n  },\n  sendWindowBtnEvent: function sendWindowBtnEvent(type) {\n    var json = {\n      \"apiKey\": config.apiKey,\n      \"securityKey\": config.securityKey,\n      \"organization_id\": config.organization_Id,\n      \"data\": {\n        \"parentId\": this.parentId,\n        \"pageId\": this.pageId,\n        \"type\": type,\n        \"author\": \"jin\"\n      }\n    };\n    CoCreateSocket.send('windowBtnEvent', json);\n  },\n  _initSocket: function _initSocket() {\n    var _this = this;\n\n    CoCreateSocket.listen('openWindow', function (data) {\n      if (data.parentId == _this.pageId) {\n        _this.container._createModal(data);\n      } // if (data.parentId == _this.pageId) {\n      //   _this.container._createModal(data);\n      // }\n\n    }), CoCreateSocket.listen('windowBtnEvent', function (data) {\n      if (data.parentId == _this.pageId) {\n        var pageId = data.pageId;\n        var type = data.type;\n\n        var modal = _this.container.getModalById(pageId);\n\n        if (modal) {\n          switch (type) {\n            case 'close':\n              _this.container._removeModal(modal);\n\n              break;\n\n            case 'maximize':\n              // minimizeWindow(w);\n              modal._setMaximize();\n\n              break;\n\n            case 'park':\n              modal.togglePark();\n              break;\n\n            default:\n          }\n        }\n      }\n    });\n  },\n  openWindow: function openWindow(aTag) {\n    var attr = {\n      url: aTag.getAttribute('href'),\n      x: aTag.getAttribute('data-modal_x'),\n      y: aTag.getAttribute('data-modal_y'),\n      width: aTag.getAttribute('data-modal_width'),\n      height: aTag.getAttribute('data-modal_height'),\n      ajax: aTag.getAttribute('data-modal_ajax'),\n      color: aTag.getAttribute('data-modal_color'),\n      header: aTag.getAttribute('data-modal_header') ? aTag.getAttribute('data-modal_header') : \"true\",\n      attributes: CoCreateUtils.getAttributes(aTag)\n    };\n    var open_type = aTag.getAttribute('data-modal_open');\n    open_type = open_type ? open_type : 'root';\n    CoCreateStorage.rootPageId = this.rootId;\n    var open_id = open_type; // if (this.isRoot) {\n    //   CoCreateStorage.parentPageId = this.pageId;\n    // } else {\n\n    switch (open_type) {\n      case 'parent':\n        open_id = this.parentId;\n        break;\n\n      case 'page':\n        open_id = this.pageId;\n        break;\n\n      case 'root':\n        open_id = this.rootId;\n        break;\n\n      default:\n        open_id = open_type;\n        break;\n      // code\n    }\n\n    CoCreateStorage.parentPageId = open_id;\n    attr.parentId = open_id; // }\n\n    if (this.isRoot) {\n      if (this._createContainer()) {\n        this.container._createModal(attr);\n      }\n    } else {\n      // attr.parentId = this.parentId;\n      CoCreateSocket.send('openWindow', {\n        \"apiKey\": config.apiKey,\n        \"securityKey\": config.securityKey,\n        \"organization_id\": config.organization_Id,\n        data: attr\n      });\n    }\n  }\n};\n\nCoCreateWindow.generateUUID = function (length) {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, \"\").substr(0, 6);\n  result += random;\n  return result;\n};\n\nvar CoCreateStorage = {};\nObject.defineProperty(CoCreateStorage, \"rootPageId\", {\n  get: function get() {\n    return localStorage.getItem('page_rootId');\n  },\n  set: function set(id) {\n    localStorage.setItem('page_rootId', id);\n  }\n});\nObject.defineProperty(CoCreateStorage, \"parentPageId\", {\n  get: function get() {\n    return localStorage.getItem('page_parentId');\n  },\n  set: function set(id) {\n    localStorage.setItem('page_parentId', id);\n  }\n});\nObject.defineProperty(CoCreateStorage, \"pageId\", {\n  get: function get() {\n    return localStorage.getItem('page_id');\n  },\n  set: function set(id) {\n    localStorage.setItem('page_id', id);\n  }\n});\nvar g_cocreateWindow = new CoCreateWindow();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./CoCreate-components/CoCreate-modal/src/CoCreate-modal.js\n");

/***/ })

/******/ })["default"];
});